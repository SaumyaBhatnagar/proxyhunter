#!/usr/bin/perl

use strict;
use App::ProxyHunter;

App::ProxyHunter->start(@ARGV);

__END__

=pod

=head1 NAME

proxyhunter - free proxy searcher and checker

=head1 DESCRIPTION

C<proxyhunter> may be used to find free proxies, it performs searching using one of the available search engine
(like Google and so on). All found proxies may be checked for availability, proxy type and speed. C<proxyhunter>
uses database as storage for found proxies, so you can easily perfrom any select statement to find what you need.

=head1 QUICK START

First of all you should install one of the available database schema. The easiest for deploy is SQLite (but not very fast)

	$ cpan App::ProxyHunter::Model::Schema::SQLite

Then you should generate configuration file and edit if needed

	$ proxyhunter --create-config proxyhunter.jconf

Now time to create database schema

	$ proxyhunter --config proxyhunter.jconf --create-schema

And finally you can start the process

	$ proxyhunter --config proxyhunter.jconf

=head1 AVAILABLE OPTIONS

=head2 --create-config /path/to/config

Generates default configuration file 

=head2 --create-schema

Creates table structures inside database. This should be used with C<--config> option

=head2 --config /path/to/config

Which config file to use for creating schema or to run

=head2 --daemon /path/to/pidfile

Run proxyhunter as daemon. C</path/to/pidfile> may be omitted, otherwise pid of the daemon will be writed to this file.
Proc::Daemon should be additionally installed for this to work.

=head1 CONFIGURATION

Use C<--create-config> option to create default configuration file. Configuration file format is JCONF (see L<Parse::JCONF>).

=head2 db

Database settings. Available options listed below

=head3 driver

DBI driver to use. You should have schema installed for this driver in App::ProxyHunter::Model::Schema namespace.

=head3 driver_cfg

DBD driver specific options, like C<mysql_auto_reconnect> and so on

=head3 host

Host of the database, if needed

=head3 schema

Database name

=head3 login

Login for database, if needed

=head3 password

Password for database, if needed

=head2 check

Checker settings. Checking performed right after proxy was inserted into database. Available options listed below

=head3 enabled

C<true> to enable proxy checking for availability and type, C<false> to disable

=head3 workers

How many workers should perform checking in parallel. Bigger value causes higher check speed and higher resource usage

=speed_check

Should checker perform speed checking right after successfull cjecking for availability. If C<true> will perform checking even if speed checking disabled in speed_check section

=head2 recheck

=head2 speed_check

=head2 search

=cut